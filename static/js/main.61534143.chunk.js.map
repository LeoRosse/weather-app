{"version":3,"sources":["actions/image.ts","modules/image.ts","actions/weather.ts","modules/weather.ts","modules/index.ts","components/WeatherInfo/utils.ts","components/WeatherInfo/WeatherInfo.tsx","App.tsx","containers/App.ts","index.tsx"],"names":["GET_IMAGE_START","GET_IMAGE_SUCCESS","GET_IMAGE_FAILURE","getImageSuccess","image","type","payload","getImageFailure","errmessage","state","initialState","undefined","loading","GET_WEATHER_START","GET_WEATHER_SUCCESS","GET_WEATHER_FAILURE","getWeatherSuccess","weather","getWeatherFailure","rootReducer","combineReducers","action","imageActions","weatherActions","convertTimeStampToDate","timestamp","timezone","date","Date","getHours","getMinutes","substr","WeatherInfo","showInfo","className","src","urls","small","alt","name","location","title","description","Math","round","main","temp","feels_like","htmlFor","humidity","temp_max","temp_min","sys","sunrise","sunset","App","getWeather","getImage","React","useState","keywords","setKeywords","onKeyPress","event","key","onChange","e","target","value","placeholder","mapDispatchToProps","keyword","dispatch","a","async","fetch","process","response","ok","json","message","connect","window","console","log","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","jsx","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.61534143.chunk.js","sourcesContent":["import { Image } from \"../@typings/image\";\nimport { AppThunk } from \"../modules\";\n\n// Constants\nexport const GET_IMAGE_START = \"image/GET_IMAGE_START\";\nexport const GET_IMAGE_SUCCESS = \"image/GET_IMAGE_SUCCESS\";\nexport const GET_IMAGE_FAILURE = \"image/GET_IMAGE_FAILURE\";\n\n//interfaces\ninterface getImageStartAction {\n  type: typeof GET_IMAGE_START\n}\ninterface getImageSuccessAction {\n  type: typeof GET_IMAGE_SUCCESS,\n  payload: Image\n}\ninterface getImageFailAction {\n  type: typeof GET_IMAGE_FAILURE,\n  payload: string\n}\n\nexport type ImageActionTypes = getImageStartAction | getImageSuccessAction | getImageFailAction\n\n// Action creators\nexport function getImageStart(): ImageActionTypes {\n  return {\n    type: GET_IMAGE_START\n  };\n}\n\nexport function getImageSuccess(image: Image): ImageActionTypes {\n  return {\n    type: GET_IMAGE_SUCCESS,\n    payload: image\n  };\n}\n\nexport function getImageFailure(errmessage: string): ImageActionTypes {\n  return {\n    type: GET_IMAGE_FAILURE,\n    payload: errmessage\n  };\n}\n\nexport const getImage = (keyword: string): AppThunk => async dispatch => {\n  dispatch(getImageStart());\n  const response = await fetch(\n    `https://api.unsplash.com/photos/random?client_id=${process.env.REACT_APP_IMAGE_API_KEY}&query=${keyword}&orientation=landscape`\n  );\n  if (!response.ok) {\n    return dispatch(getImageFailure(\"Unable to fetch\"));\n  }\n  try {\n    const image = await response.json();\n    dispatch(getImageSuccess(image));\n  } catch (error) {\n    dispatch(getImageFailure(error.message));\n  }\n};\n","import * as imageActions from '../actions/image';\nimport { ImageActionTypes } from '../actions/image';\nimport { Image } from '../@typings/image';\n\n//interfaces\ninterface ImageState {\n  image: Image | undefined;\n  loading: boolean;\n}\nexport interface ImageSelectorState {\n  image: ImageState;\n}\n\n// Selectors\n\nexport const image = (state: ImageSelectorState) => state.image.image;\n\n// Store & reducer\n\nconst initialState: ImageState = {\n  image: undefined,\n  loading: false,\n};\n\nexport default function reducer(state = initialState, action: ImageActionTypes) {\n  switch (action.type) {\n    case imageActions.GET_IMAGE_START:\n      return {\n        ...state,\n        loading: true,\n      };\n    case imageActions.GET_IMAGE_SUCCESS:\n      return {\n        ...state,\n        image: action.payload,\n        loading: false,\n      };\n    case imageActions.GET_IMAGE_FAILURE:\n      return {\n        ...state,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n}\n","import { Weather } from \"../@typings/weather\";\nimport { AppThunk } from \"../modules\";\n\n// Constants\nexport const GET_WEATHER_START = \"weather/GET_WEATHER_START\";\nexport const GET_WEATHER_SUCCESS = \"weather/GET_WEATHER_SUCCESS\";\nexport const GET_WEATHER_FAILURE = \"weather/GET_WEATHER_FAILURE\";\n\n// Action creators\nexport function getWeatherStart() {\n  return {\n    type: GET_WEATHER_START\n  };\n}\n\nexport function getWeatherSuccess(weather: Weather) {\n  return {\n    type: GET_WEATHER_SUCCESS,\n    payload: weather\n  };\n}\n\nexport function getWeatherFailure(errmessage: string) {\n  return {\n    type: GET_WEATHER_FAILURE,\n    payload: errmessage\n  };\n}\n\nexport const getWeather = (keyword: string): AppThunk => async dispatch => {\n  dispatch(getWeatherStart());\n  const response = await fetch(\n    `https://api.openweathermap.org/data/2.5/weather?q=${keyword}&units=metric&appid=${process.env.REACT_APP_WEATHER_API_KEY}`\n  );\n  if (!response.ok) {\n    return dispatch(getWeatherFailure(\"Unable to fetch\"));\n  }\n  try {\n    const weather = await response.json();\n    dispatch(getWeatherSuccess(weather));\n  } catch (error) {\n    dispatch(getWeatherFailure(error.message));\n  }\n};\n","import * as weatherActions from '../actions/weather';\n\n// Selectors\n\nexport const weather = (state: any) => state.weather.weather;\n\n// Store & reducer\n\nconst initialState = {\n  weather: null,\n  loading: false,\n};\n\nexport default function reducer(state = initialState, action: any) {\n  switch (action.type) {\n    case weatherActions.GET_WEATHER_START:\n      return {\n        ...state,\n        loading: true,\n      };\n    case weatherActions.GET_WEATHER_SUCCESS:\n      return {\n        ...state,\n        weather: action.payload,\n        loading: false,\n      };\n    case weatherActions.GET_WEATHER_FAILURE:\n      return {\n        ...state,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers, Action } from 'redux';\nimport image from './image';\nimport weather from './weather';\nimport { ThunkAction } from 'redux-thunk';\n\nconst rootReducer = combineReducers({\n  image,\n  weather,\n});\n\ntype RootReducer = ReturnType<typeof rootReducer>;\n\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootReducer, null, Action<string>>;\n\nexport default rootReducer;\n","export const convertTimeStampToDate = (timestamp: number, timezone: number) => {\n  const ItalyTimezone = 3600;\n  const adjustTimezone = timestamp + timezone - ItalyTimezone;\n  const date = new Date(adjustTimezone * 1000);\n  const hour = date.getHours();\n  const minutes = '0' + date.getMinutes();\n  return hour + ':' + minutes.substr(-2);\n};\n","import React from 'react';\nimport { Weather } from '../../@typings/weather';\nimport { Image } from '../../@typings/image';\nimport './WeatherInfo.styles.scss';\nimport { convertTimeStampToDate } from './utils';\ninterface WeatherInfoProps {\n  showInfo: boolean;\n  weather: Weather;\n  image: Image | undefined;\n}\n\nexport const WeatherInfo: React.FC<WeatherInfoProps> = ({ showInfo, weather, image }) =>\n  showInfo ? (\n    <div className=\"card\">\n      <div className=\"photo__container\">\n        <img src={image && image.urls.small} alt=\"City\" className=\"photo\" />\n      </div>\n      <div className=\"title-content\">\n        <h3>{weather.name}</h3>\n        <hr />\n        <div className=\"intro\">{image && image.location.title}</div>\n      </div>\n      <p className=\"info\">\n        <label>{weather.weather[0].description}</label>\n        <span>\n          <label>temperature:</label> {Math.round(weather.main.temp)}°C\n        </span>\n        <span>\n          <label>perceived temperature:</label> {Math.round(weather.main.feels_like)}°C\n        </span>\n        <span>\n          <label htmlFor=\"\">humidity:</label> {Math.round(weather.main.humidity)}%\n        </span>\n        <span>\n          <label htmlFor=\"\">temperature max:</label> {Math.round(weather.main.temp_max)}°C\n        </span>\n        <span>\n          <label htmlFor=\"\">temperature min:</label> {Math.round(weather.main.temp_min)}°C\n        </span>\n        <span>\n          <label htmlFor=\"\">sunrise: </label> {convertTimeStampToDate(weather.sys.sunrise, weather.timezone)}\n        </span>\n        <span>\n          <label htmlFor=\"\">sunset: </label> {convertTimeStampToDate(weather.sys.sunset, weather.timezone)}\n        </span>\n      </p>\n    </div>\n  ) : null;\n","import React from 'react';\nimport './App.styles.scss';\nimport { Weather } from './@typings/weather';\nimport { Image } from './@typings/image';\nimport { WeatherInfo } from './components/WeatherInfo/WeatherInfo';\n\ninterface AppProps {\n  weather: Weather;\n  image: Image | undefined;\n  getWeather: (keyword: string) => void;\n  getImage: (keyword: string) => void;\n}\n\nconst App: React.FC<AppProps> = ({ weather, getWeather, image, getImage }) => {\n  const [keywords, setKeywords] = React.useState('');\n  const search = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter') {\n      getWeather(keywords);\n      getImage(keywords);\n      setKeywords('');\n    }\n  };\n  return (\n    <main className=\"main\">\n      <input\n        type=\"text\"\n        onKeyPress={search}\n        onChange={e => setKeywords(e.target.value)}\n        value={keywords}\n        className=\"main__input\"\n        placeholder=\"Choose a city...\"\n      />\n      <WeatherInfo showInfo={weather !== null && image !== null} weather={weather} image={image} />\n    </main>\n  );\n};\n\nexport default App;\n","import { connect } from 'react-redux';\nimport { getWeather } from '../actions/weather';\nimport { getImage } from '../actions/image';\nimport { weather } from '../modules/weather';\nimport { image } from '../modules/image';\n\nimport App from '../App';\n\nconst mapDispatchToProps = {\n  getWeather,\n  getImage,\n};\n\nconst mapStateToProps = (state: any) => {\n  window.console.log(state);\n  return {\n    weather: weather(state),\n    image: image(state),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunkMiddleware from 'redux-thunk';\n\nimport rootReducer from './modules';\nimport './index.css';\nimport App from './containers/App';\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n  }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\n\nconst jsx = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(jsx, document.getElementById('root'));\n"],"sourceRoot":""}