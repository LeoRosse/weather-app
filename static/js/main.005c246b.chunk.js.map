{"version":3,"sources":["actions/image.ts","modules/image.ts","actions/weather.ts","modules/weather.ts","modules/index.ts","components/WeatherInfo/utils.ts","components/WeatherInfo/WeatherInfo.tsx","App.tsx","containers/App.ts","index.tsx"],"names":["GET_IMAGE_START","GET_IMAGE_SUCCESS","GET_IMAGE_FAILURE","getImageSuccess","image","type","payload","getImageFailure","errmessage","state","initialState","loading","GET_WEATHER_START","GET_WEATHER_SUCCESS","GET_WEATHER_FAILURE","getWeatherSuccess","weather","getWeatherFailure","rootReducer","combineReducers","action","imageActions","weatherActions","convertTimeStampToDate","timestamp","date","Date","getHours","getMinutes","substr","WeatherInfo","showInfo","className","src","urls","small","alt","name","location","title","description","Math","round","main","temp","feels_like","htmlFor","humidity","temp_max","temp_min","sys","sunrise","sunset","App","getWeather","getImage","React","useState","keywords","setKeywords","onKeyPress","event","key","onChange","e","target","value","placeholder","mapDispatchToProps","keyword","dispatch","a","async","fetch","process","response","ok","json","message","connect","window","console","log","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","jsx","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.005c246b.chunk.js","sourcesContent":["import { Image } from \"../@typings/image\";\nimport { Action } from \"redux\";\nimport { RootReducer } from \"../modules\";\nimport { ThunkAction } from \"redux-thunk\";\n\n// Constants\nexport const GET_IMAGE_START = \"image/GET_IMAGE_START\";\nexport const GET_IMAGE_SUCCESS = \"image/GET_IMAGE_SUCCESS\";\nexport const GET_IMAGE_FAILURE = \"image/GET_IMAGE_FAILURE\";\n\n// Action creators\nexport function getImageStart() {\n  return {\n    type: GET_IMAGE_START\n  };\n}\n\nexport function getImageSuccess(image: Image) {\n  return {\n    type: GET_IMAGE_SUCCESS,\n    payload: image\n  };\n}\n\nexport function getImageFailure(errmessage: string) {\n  return {\n    type: GET_IMAGE_FAILURE,\n    payload: errmessage\n  };\n}\n\nexport const getImage = (\n  keyword: string\n): ThunkAction<void, RootReducer, null, Action<string>> => async dispatch => {\n  dispatch(getImageStart());\n  const response = await fetch(\n    `https://api.unsplash.com/photos/random?client_id=${process.env.REACT_APP_IMAGE_API_KEY}&query=${keyword}&orientation=landscape`\n  );\n  if (!response.ok) {\n    return dispatch(getImageFailure(\"Unable to fetch\"));\n  }\n  try {\n    const image = await response.json();\n    dispatch(getImageSuccess(image));\n  } catch (error) {\n    dispatch(getImageFailure(error.message));\n  }\n};\n","import * as imageActions from \"../actions/image\";\n\n// Selectors\n\nexport const image = (state: any) => state.image.image;\n\n// Store & reducer\n\nconst initialState = {\n  image: null,\n  loading: false\n};\n\nexport default function reducer(state = initialState, action: any) {\n  switch (action.type) {\n    case imageActions.GET_IMAGE_START:\n      return {\n        ...state,\n        loading: true\n      };\n    case imageActions.GET_IMAGE_SUCCESS:\n      return {\n        ...state,\n        image: action.payload,\n        loading: false\n      };\n    case imageActions.GET_IMAGE_FAILURE:\n      return {\n        ...state,\n        loading: false\n      };\n    default:\n      return state;\n  }\n}\n","import { Weather } from \"../@typings/weather\";\n\n// Constants\nexport const GET_WEATHER_START = \"weather/GET_WEATHER_START\";\nexport const GET_WEATHER_SUCCESS = \"weather/GET_WEATHER_SUCCESS\";\nexport const GET_WEATHER_FAILURE = \"weather/GET_WEATHER_FAILURE\";\n\n// Action creators\nexport function getWeatherStart() {\n  return {\n    type: GET_WEATHER_START\n  };\n}\n\nexport function getWeatherSuccess(weather: Weather) {\n  return {\n    type: GET_WEATHER_SUCCESS,\n    payload: weather\n  };\n}\n\nexport function getWeatherFailure(errmessage: string) {\n  return {\n    type: GET_WEATHER_FAILURE,\n    payload: errmessage\n  };\n}\n\nexport function getWeather(keyword: string) {\n  return async (dispatch: any) => {\n    dispatch(getWeatherStart());\n    const response = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${keyword}&units=metric&appid=${process.env.REACT_APP_WEATHER_API_KEY}`\n    );\n    if (!response.ok) {\n      return dispatch(getWeatherFailure(\"Unable to fetch\"));\n    }\n    try {\n      const weather = await response.json();\n      dispatch(getWeatherSuccess(weather));\n    } catch (error) {\n      dispatch(getWeatherFailure(error.message));\n    }\n  };\n}\n","import * as weatherActions from \"../actions/weather\";\n\n// Selectors\n\nexport const weather = (state: any) => state.weather.weather;\n\n// Store & reducer\n\nconst initialState = {\n  weather: null,\n  loading: false\n};\n\nexport default function reducer(state = initialState, action: any) {\n  switch (action.type) {\n    case weatherActions.GET_WEATHER_START:\n      return {\n        ...state,\n        loading: true\n      };\n    case weatherActions.GET_WEATHER_SUCCESS:\n      return {\n        ...state,\n        weather: action.payload,\n        loading: false\n      };\n    case weatherActions.GET_WEATHER_FAILURE:\n      return {\n        ...state,\n        loading: false\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport image from \"./image\";\nimport weather from \"./weather\";\n\nconst rootReducer = combineReducers({\n  image,\n  weather\n});\n\nexport type RootReducer = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","export const convertTimeStampToDate = (timestamp: number) => {\n    const date = new Date(timestamp * 1000);\n    const hour = date.getHours();\n    const minutes = \"0\" + date.getMinutes();\n    return hour + \":\" + minutes.substr(-2);\n}","import React from \"react\";\nimport { Weather } from \"../../@typings/weather\";\nimport { Image } from \"../../@typings/image\";\nimport \"./WeatherInfo.styles.scss\";\nimport { convertTimeStampToDate } from \"./utils\";\ninterface WeatherInfoProps {\n  showInfo: boolean;\n  weather: Weather;\n  image: Image;\n}\n\nexport const WeatherInfo: React.FC<WeatherInfoProps> = ({\n  showInfo,\n  weather,\n  image\n}) =>\n  showInfo ? (\n    <div className=\"card\">\n      <div className=\"photo__container\">\n        <img src={image.urls.small} alt=\"City\" className=\"photo\" />\n      </div>\n      <div className=\"title-content\">\n        <h3>{weather.name}</h3>\n        <hr />\n        <div className=\"intro\">{image.location.title}</div>\n      </div>\n      <p className=\"info\">\n        <label>{weather.weather[0].description}</label>\n        <span>\n          <label>temperature:</label> {Math.round(weather.main.temp)}°C\n        </span>\n        <span>\n          <label>perceived temperature:</label>{\" \"}\n          {Math.round(weather.main.feels_like)}°C\n        </span>\n        <span>\n          <label htmlFor=\"\">humidity:</label>{\" \"}\n          {Math.round(weather.main.humidity)}%\n        </span>\n        <span>\n          <label htmlFor=\"\">temperature max:</label>{\" \"}\n          {Math.round(weather.main.temp_max)}°C\n        </span>\n        <span>\n          <label htmlFor=\"\">temperature min:</label>{\" \"}\n          {Math.round(weather.main.temp_min)}°C\n        </span>\n        <span>\n          <label htmlFor=\"\">sunrise: </label>{\" \"}\n          {convertTimeStampToDate(weather.sys.sunrise)}\n        </span>\n        <span>\n          <label htmlFor=\"\">sunset: </label>{\" \"}\n          {convertTimeStampToDate(weather.sys.sunset)}\n        </span>\n      </p>\n    </div>\n  ) : null;\n","import React from \"react\";\nimport \"./App.styles.scss\";\nimport { Weather } from \"./@typings/weather\";\nimport { WeatherInfo } from \"./components/WeatherInfo/WeatherInfo\";\n\ninterface AppProps {\n  weather: Weather;\n  image: any;\n  getWeather: (keyword: string) => void;\n  getImage: (keyword: string) => void;\n}\n\nconst App: React.FC<AppProps> = ({ weather, getWeather, image, getImage }) => {\n  const [keywords, setKeywords] = React.useState(\"\");\n  const search = (event: React.KeyboardEvent) => {\n    if (event.key === \"Enter\") {\n      getWeather(keywords);\n      getImage(keywords);\n      setKeywords(\"\");\n    }\n  };\n  return (\n    <main className=\"main\">\n      <input\n        type=\"text\"\n        onKeyPress={search}\n        onChange={e => setKeywords(e.target.value)}\n        value={keywords}\n        className=\"main__input\"\n        placeholder=\"Choose a city...\"\n      />\n      <WeatherInfo\n        showInfo={weather !== null && image !== null}\n        weather={weather}\n        image={image}\n      />\n    </main>\n  );\n};\n\nexport default App;\n","import { connect } from \"react-redux\";\nimport { getWeather } from \"../actions/weather\";\nimport { getImage } from \"../actions/image\";\nimport { weather } from \"../modules/weather\";\nimport { image } from \"../modules/image\";\n\nimport App from \"../App\";\n\nconst mapDispatchToProps = {\n  getWeather,\n  getImage\n};\n\nconst mapStateToProps = (state: any) => {\n  window.console.log(state);\n  return {\n    weather: weather(state),\n    image: image(state)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunkMiddleware from \"redux-thunk\";\n\nimport rootReducer from \"./modules\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n  }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunkMiddleware))\n);\n\nconst jsx = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(jsx, document.getElementById(\"root\"));\n"],"sourceRoot":""}