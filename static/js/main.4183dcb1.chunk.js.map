{"version":3,"sources":["actions/image.ts","modules/image.ts","actions/weather.ts","modules/weather.ts","modules/index.ts","components/WeatherInfo/utils.ts","components/WeatherInfo/WeatherInfo.tsx","App.tsx","containers/App.ts","index.tsx"],"names":["GET_IMAGE_START","GET_IMAGE_SUCCESS","GET_IMAGE_FAILURE","getImageSuccess","image","type","payload","getImageFailure","errmessage","state","initialState","loading","GET_WEATHER_START","GET_WEATHER_SUCCESS","GET_WEATHER_FAILURE","getWeatherSuccess","weather","getWeatherFailure","rootReducer","combineReducers","action","imageActions","weatherActions","convertTimeStampToDate","timestamp","date","Date","getHours","getMinutes","substr","WeatherInfo","showInfo","className","src","urls","small","alt","name","location","title","description","Math","round","main","temp","feels_like","htmlFor","humidity","temp_max","temp_min","sys","sunrise","sunset","App","getWeather","getImage","React","useState","keywords","setKeywords","onKeyPress","event","key","onChange","e","target","value","placeholder","mapDispatchToProps","keyword","dispatch","a","async","fetch","process","response","ok","json","message","connect","window","console","log","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","jsx","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4183dcb1.chunk.js","sourcesContent":["import { Image } from \"../@typings/image\";\r\n\r\n// Constants\r\nexport const GET_IMAGE_START = \"image/GET_IMAGE_START\";\r\nexport const GET_IMAGE_SUCCESS = \"image/GET_IMAGE_SUCCESS\";\r\nexport const GET_IMAGE_FAILURE = \"image/GET_IMAGE_FAILURE\";\r\n\r\n// Action creators\r\nexport function getImageStart() {\r\n  return {\r\n    type: GET_IMAGE_START\r\n  };\r\n}\r\n\r\nexport function getImageSuccess(image: Image) {\r\n  return {\r\n    type: GET_IMAGE_SUCCESS,\r\n    payload: image\r\n  };\r\n}\r\n\r\nexport function getImageFailure(errmessage: string) {\r\n  return {\r\n    type: GET_IMAGE_FAILURE,\r\n    payload: errmessage\r\n  };\r\n}\r\n\r\nexport function getImage(keyword: string) {\r\n  return async (dispatch: any) => {\r\n    dispatch(getImageStart());\r\n    const response = await fetch(\r\n      `https://api.unsplash.com/photos/random?client_id=${process.env.REACT_APP_IMAGE_API_KEY}&query=${keyword}&orientation=landscape`\r\n    );\r\n    if (!response.ok) {\r\n      return dispatch(getImageFailure(\"Unable to fetch\"));\r\n    }\r\n    try {\r\n      const image = await response.json();\r\n      dispatch(getImageSuccess(image));\r\n    } catch (error) {\r\n      dispatch(getImageFailure(error.message));\r\n    }\r\n  };\r\n}\r\n","import * as imageActions from \"../actions/image\";\r\n\r\n// Selectors\r\n\r\nexport const image = (state: any) => state.image.image;\r\n\r\n// Store & reducer\r\n\r\nconst initialState = {\r\n  image: null,\r\n  loading: false\r\n};\r\n\r\nexport default function reducer(state = initialState, action: any) {\r\n  switch (action.type) {\r\n    case imageActions.GET_IMAGE_START:\r\n      return {\r\n        ...state,\r\n        loading: true\r\n      };\r\n    case imageActions.GET_IMAGE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        image: action.payload,\r\n        loading: false\r\n      };\r\n    case imageActions.GET_IMAGE_FAILURE:\r\n      return {\r\n        ...state,\r\n        loading: false\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { Weather } from \"../@typings/weather\";\r\n\r\n// Constants\r\nexport const GET_WEATHER_START = \"weather/GET_WEATHER_START\";\r\nexport const GET_WEATHER_SUCCESS = \"weather/GET_WEATHER_SUCCESS\";\r\nexport const GET_WEATHER_FAILURE = \"weather/GET_WEATHER_FAILURE\";\r\n\r\n// Action creators\r\nexport function getWeatherStart() {\r\n  return {\r\n    type: GET_WEATHER_START\r\n  };\r\n}\r\n\r\nexport function getWeatherSuccess(weather: Weather) {\r\n  return {\r\n    type: GET_WEATHER_SUCCESS,\r\n    payload: weather\r\n  };\r\n}\r\n\r\nexport function getWeatherFailure(errmessage: string) {\r\n  return {\r\n    type: GET_WEATHER_FAILURE,\r\n    payload: errmessage\r\n  };\r\n}\r\n\r\nexport function getWeather(keyword: string) {\r\n  return async (dispatch: any) => {\r\n    dispatch(getWeatherStart());\r\n    const response = await fetch(\r\n      `https://api.openweathermap.org/data/2.5/weather?q=${keyword}&units=metric&appid=${process.env.REACT_APP_WEATHER_API_KEY}`\r\n    );\r\n    if (!response.ok) {\r\n      return dispatch(getWeatherFailure(\"Unable to fetch\"));\r\n    }\r\n    try {\r\n      const weather = await response.json();\r\n      dispatch(getWeatherSuccess(weather));\r\n    } catch (error) {\r\n      dispatch(getWeatherFailure(error.message));\r\n    }\r\n  };\r\n}\r\n","import * as weatherActions from \"../actions/weather\";\r\n\r\n// Selectors\r\n\r\nexport const weather = (state: any) => state.weather.weather;\r\n\r\n// Store & reducer\r\n\r\nconst initialState = {\r\n  weather: null,\r\n  loading: false\r\n};\r\n\r\nexport default function reducer(state = initialState, action: any) {\r\n  switch (action.type) {\r\n    case weatherActions.GET_WEATHER_START:\r\n      return {\r\n        ...state,\r\n        loading: true\r\n      };\r\n    case weatherActions.GET_WEATHER_SUCCESS:\r\n      return {\r\n        ...state,\r\n        weather: action.payload,\r\n        loading: false\r\n      };\r\n    case weatherActions.GET_WEATHER_FAILURE:\r\n      return {\r\n        ...state,\r\n        loading: false\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport image from \"./image\";\r\nimport weather from \"./weather\";\r\n\r\nconst rootReducer = combineReducers({\r\n  image,\r\n  weather\r\n});\r\n\r\nexport default rootReducer;\r\n","export const convertTimeStampToDate = (timestamp: number) => {\r\n    const date = new Date(timestamp * 1000);\r\n    const hour = date.getHours();\r\n    const minutes = \"0\" + date.getMinutes();\r\n    return hour + \":\" + minutes.substr(-2);\r\n}","import React from \"react\";\r\nimport { Weather } from \"../../@typings/weather\";\r\nimport { Image } from \"../../@typings/image\";\r\nimport \"./WeatherInfo.styles.scss\";\r\nimport { convertTimeStampToDate } from \"./utils\";\r\ninterface WeatherInfoProps {\r\n  showInfo: boolean;\r\n  weather: Weather;\r\n  image: Image;\r\n}\r\n\r\nexport const WeatherInfo: React.FC<WeatherInfoProps> = ({\r\n  showInfo,\r\n  weather,\r\n  image\r\n}) =>\r\n  showInfo ? (\r\n    <div className=\"card\">\r\n      <div className=\"photo__container\">\r\n        <img src={image.urls.small} alt=\"City\" className=\"photo\" />\r\n      </div>\r\n      <div className=\"title-content\">\r\n        <h3>{weather.name}</h3>\r\n        <hr />\r\n        <div className=\"intro\">{image.location.title}</div>\r\n      </div>\r\n      <p className=\"info\">\r\n        <label>{weather.weather[0].description}</label>\r\n        <span>\r\n          <label>temperature:</label> {Math.round(weather.main.temp)}°C\r\n        </span>\r\n        <span>\r\n          <label>perceived temperature:</label>{\" \"}\r\n          {Math.round(weather.main.feels_like)}°C\r\n        </span>\r\n        <span>\r\n          <label htmlFor=\"\">humidity:</label>{\" \"}\r\n          {Math.round(weather.main.humidity)}%\r\n        </span>\r\n        <span>\r\n          <label htmlFor=\"\">temperature max:</label>{\" \"}\r\n          {Math.round(weather.main.temp_max)}°C\r\n        </span>\r\n        <span>\r\n          <label htmlFor=\"\">temperature min:</label>{\" \"}\r\n          {Math.round(weather.main.temp_min)}°C\r\n        </span>\r\n        <span>\r\n          <label htmlFor=\"\">sunrise: </label>{\" \"}\r\n          {convertTimeStampToDate(weather.sys.sunrise)}\r\n        </span>\r\n        <span>\r\n          <label htmlFor=\"\">sunset: </label>{\" \"}\r\n          {convertTimeStampToDate(weather.sys.sunset)}\r\n        </span>\r\n      </p>\r\n    </div>\r\n  ) : null;\r\n","import React from \"react\";\r\nimport \"./App.styles.scss\";\r\nimport { Weather } from \"./@typings/weather\";\r\nimport { WeatherInfo } from \"./components/WeatherInfo/WeatherInfo\";\r\n\r\ninterface AppProps {\r\n  weather: Weather;\r\n  image: any;\r\n  getWeather: (keyword: string) => void;\r\n  getImage: (keyword: string) => void;\r\n}\r\n\r\nconst App: React.FC<AppProps> = ({ weather, getWeather, image, getImage }) => {\r\n  const [keywords, setKeywords] = React.useState(\"\");\r\n  const search = (event: React.KeyboardEvent) => {\r\n    if (event.key === \"Enter\") {\r\n      getWeather(keywords);\r\n      getImage(keywords);\r\n      setKeywords(\"\");\r\n    }\r\n  };\r\n  return (\r\n    <main className=\"main\">\r\n      <input\r\n        type=\"text\"\r\n        onKeyPress={search}\r\n        onChange={e => setKeywords(e.target.value)}\r\n        value={keywords}\r\n        className=\"main__input\"\r\n        placeholder=\"Choose a city...\"\r\n      />\r\n      <WeatherInfo\r\n        showInfo={weather !== null && image !== null}\r\n        weather={weather}\r\n        image={image}\r\n      />\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { connect } from \"react-redux\";\r\nimport { getWeather } from \"../actions/weather\";\r\nimport { getImage } from \"../actions/image\";\r\nimport { weather } from \"../modules/weather\";\r\nimport { image } from \"../modules/image\";\r\n\r\nimport App from \"../App\";\r\n\r\nconst mapDispatchToProps = {\r\n  getWeather,\r\n  getImage\r\n};\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  window.console.log(state);\r\n  return {\r\n    weather: weather(state),\r\n    image: image(state)\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { createStore, applyMiddleware, compose } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nimport rootReducer from \"./modules\";\r\nimport \"./index.css\";\r\nimport App from \"./containers/App\";\r\n\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n  }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunkMiddleware))\r\n);\r\n\r\nconst jsx = (\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n);\r\n\r\nReactDOM.render(jsx, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}